<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于 hexo 博客搭建与 Next 主题优化——第一部分</title>
    <url>/posts/aa2b6a17.html</url>
    <content><![CDATA[<!-- build time:Sat Apr 11 2020 20:58:37 GMT+0800 (GMT+08:00) --><html><head></head><body><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>把 hexo 博客搭建与 next 主题优化的过程记录下来，以便日后参考。</p><p>本文分为三个部分：</p><ul><li>Hexo 的搭建与部署</li><li>Next 主题的基本设置</li><li>Next 主题的深度美化</li></ul><blockquote><p>本文基于目前最新的 Next7 主题 7.8.0，其它版本仅做参考。</p></blockquote><a id="more"></a><hr><h2 id="Hexo-的搭建与部署"><a href="#Hexo-的搭建与部署" class="headerlink" title="Hexo 的搭建与部署"></a>Hexo 的搭建与部署</h2><h3 id="什么是-Hexo"><a href="#什么是-Hexo" class="headerlink" title="什么是 Hexo"></a>什么是 Hexo</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>在安装 hexo 框架之前，我们需要先安装该框架的依赖环境：</p><ol><li>Node.js</li><li>Git</li></ol><h4 id="Node-js-安装"><a href="#Node-js-安装" class="headerlink" title="Node.js 安装"></a>Node.js 安装</h4><p>因为 Hexo 框架是基于 Node.js 渲染的，所以必须要安装 Node.js 环境。</p><p>Windows：</p><ul><li><p>可以前往 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener" title="Node.js官网">Node.js</a> 官网下载</p></li><li><p>也可以去 <a href="https://npm.taobao.org/mirrors/node" target="_blank" rel="noopener" title="淘宝 Node.js 镜像">淘宝 Node.js 镜像</a> 下载</p></li></ul><p>关于版本：选择 LTS 版本即可。</p><h4 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h4><p>Git 用于管理你的 hexo 博客文章，帮助我们部署到 Github Pages 静态仓库上。</p><p>Windows：</p><ul><li><p>去 <a href="https://gitforwindows.org/" target="_blank" rel="noopener" title="Git官网">Git官网</a> 下载</p></li><li><p>建议前往 <a href="https://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener" title="淘宝 Git for Windows 镜像">淘宝 Git for Windows 镜像</a> 下载</p></li></ul><h4 id="安装完成验证"><a href="#安装完成验证" class="headerlink" title="安装完成验证"></a>安装完成验证</h4><p>在 Git Bash 中输入以下命令。</p><h5 id="Node-js-验证"><a href="#Node-js-验证" class="headerlink" title="Node.js 验证"></a>Node.js 验证</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CRMSH"><figure class="iseeu highlight /crmsh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br><span class="line">npm -v</span><br></pre></td></tr></tbody></table></figure></div><h5 id="Git-验证"><a href="#Git-验证" class="headerlink" title="Git 验证"></a>Git 验证</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ADA"><figure class="iseeu highlight /ada"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="comment">--version</span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h3><p><strong>本文安装环境是基于 Windows10，以下操作均以 Windows 操作系统下安装为例。</strong></p><blockquote><p>注意事项：</p><ul><li>建议只是用 Git Bash 来执行命令，cmd 中部分命令可能会出现一些问题。</li><li>由于使用 <code>npm</code> 安装速度慢，可以选择安装淘宝的源</li><li>在 Git Bash 中输入以下命令</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="COFFEESCRIPT"><figure class="iseeu highlight /coffeescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g cnpm --registry=https://registry.<span class="built_in">npm</span>.taobao.org</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>-g 全局安装</p><p>registry 镜像源，指向淘宝</p></blockquote><ul><li>安装完成后，可以使用命令 <code>cnpm</code>、<code>cnpm -v</code> 验证</li><li><strong>以下 <code>npm</code> 命令均可使用 <code>cnpm</code> 代替</strong></li></ul></blockquote><h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><p>在 Git Bash 中输入以下命令，等待安装完成。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AVRASM"><figure class="iseeu highlight /avrasm"><table><tbody><tr><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></tbody></table></figure></div><p>安装完成后，可以使用 <code>hexo -v</code> 验证。</p><h4 id="初始化-hexo"><a href="#初始化-hexo" class="headerlink" title="初始化 hexo"></a>初始化 hexo</h4><h5 id="创建-hexo-博客根文件夹，并初始化"><a href="#创建-hexo-博客根文件夹，并初始化" class="headerlink" title="创建 hexo 博客根文件夹，并初始化"></a>创建 hexo 博客根文件夹，并初始化</h5><p>这个文件夹是你以后存放博客代码与文章的地方，如果搭建过程出现了什么错误把它删掉重来即可。</p><p>执行以下命令，hexo 会在你当前所在的路径创建你指定的文件夹。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PROPERTIES"><figure class="iseeu highlight /properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">init (folder)</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">blog //进入博客根文件夹</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">install</span></span><br></pre></td></tr></tbody></table></figure></div><p><code>(folder)</code>为指定文件夹，如：<code>hexo init blog</code></p><p><code>hexo init (folder)</code>这个命令执行时间比较长，请耐心等待。如果初始化失败可以将这个文件夹删掉重试。</p><p>初始化完成后，打开这个文件夹，可以看到里面的目录如下：</p><blockquote><ul><li><code>node_modules</code>: 依赖包</li><li><code>public</code>：存放生成的页面</li><li><code>scaffolds</code>：生成文章的一些模板</li><li><code>source</code>：用来存放你的文章</li><li><code>themes</code>：存放主题</li><li><font color="red"><strong><code>_config.yml</code>: 站点配置文件</strong></font></li></ul></blockquote><p>现在我们的 hexo 博客已经搭建成功了。在 git bash 输入以下命令</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PROPERTIES"><figure class="iseeu highlight /properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">//进入</span> <span class="string">hexo 根目录</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">s</span></span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>hexo g：hexo generate 的缩写</p><p>hexo s：hexo sever 的缩写</p></blockquote><p>此时，我们可以打开浏览器，输入 <code>localhost:4000</code> ，可以看见出现了 hexo 的默认主题。</p><p><strong>输入 <code>ctrl + c</code> 可以结束服务。</strong></p><h3 id="把-hexo-博客部署到-github-page"><a href="#把-hexo-博客部署到-github-page" class="headerlink" title="把 hexo 博客部署到 github page"></a>把 hexo 博客部署到 github page</h3><blockquote><p>为什么要把 hexo 部署到 GitHub 上？</p><ol><li><p>免费</p></li><li><p>可以随意绑定自己的域名，不用备案</p></li><li><p>可以一键开启 HTTPS</p></li><li><p>……</p></li></ol></blockquote><h4 id="在-github-创建个人仓库"><a href="#在-github-创建个人仓库" class="headerlink" title="在 github 创建个人仓库"></a>在 github 创建个人仓库</h4><p>首先，你需要注册一个 GitHub 账号，可以前往 <a href="https://github.com/" target="_blank" rel="noopener">GitHub 官网</a> 注册。</p><h4 id="创建-GitHub-个人仓库"><a href="#创建-GitHub-个人仓库" class="headerlink" title="创建 GitHub 个人仓库"></a>创建 GitHub 个人仓库</h4><p>在 <a href="https://github.com/" target="_blank" rel="noopener">GitHub 官网</a> 上可以看见一个 New repository ,点击可以新建仓库。</p><p>注意：创建的<strong>仓库名</strong>必须为<font color="red"> <code>GitHub 用户名.github.io</code> </font>，勾选公开 <code>Public</code> 状态，可以选择勾选 README 选项。</p><p>这样设置后，我们可以在不绑定域名的情况下，使用 <code>GitHub 用户名.github.io</code> 访问我们的博客。</p><h4 id="生成-SSH-key"><a href="#生成-SSH-key" class="headerlink" title="生成 SSH key"></a>生成 SSH key</h4><blockquote><p>如果是第一次在自己的电脑上使用 git 上传到 GitHub，那么必须要配置 <code>SSH key</code>，表示 GitHub 允许这台机器有权限使用 git 上传代码到远端仓库。</p></blockquote><p>可以使用命令 <code>cd ~/.ssh</code> 查看本机是否已存在 ssh 密钥，如果显示 <code>No such file or directory</code> 则表示不存在；如果不是的话，可以选择使用已经存在的密钥或者重新生成一份。</p><h5 id="设置-git-提交的用户信息"><a href="#设置-git-提交的用户信息" class="headerlink" title="设置 git 提交的用户信息"></a>设置 git 提交的用户信息</h5><p>使用 git bash，输入以下命令</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tbody><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"GitHub 用户名"</span></span><br><span class="line">git congit --global user.eamil <span class="string">"绑定 GitHub 的邮箱"</span></span><br></pre></td></tr></tbody></table></figure></div><p>检查信息有没有输入正确可以使用以下指令</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tbody><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>user.name</span><br><span class="line">git<span class="built_in"> config </span>user.email</span><br></pre></td></tr></tbody></table></figure></div><h5 id="创建-SSH-key"><a href="#创建-SSH-key" class="headerlink" title="创建 SSH key"></a>创建 SSH key</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="EXCEL"><figure class="iseeu highlight /excel"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"GitHub 邮箱"</span></span><br></pre></td></tr></tbody></table></figure></div><p>之后连续回车，最终会在 C 盘生成一个 <code>.ssh</code> 文件夹。</p><p>在你的电脑里找到这个 <code>.ssh</code> 文件夹并打开，把 <code>id_rsa.pub</code> 里面的内容复制，然后打开 <a href="https://github.com/" target="_blank" rel="noopener">GitHub 官网</a> 打开 <code>Setting</code>，找到 <code>SSH and GPG keys</code> ，点击 <code>New SSH key</code>，把刚才从 <code>id_rsa.pub</code> 复制的内容粘贴进去。</p><blockquote><p><code>id_rsa</code> 是你的电脑的私人密钥，不能给别人看，<code>id_rsa_pub</code> 是公共密钥，可以随便给别人看。</p><p>把公钥放在 GitHub 上后，当你连接自己的账户时，他会根据公钥匹配匹配你的私钥，如果相互匹配，才能通过 git 上传你的文件到 GitHub 上。</p></blockquote><h5 id="检查是否成功"><a href="#检查是否成功" class="headerlink" title="检查是否成功"></a>检查是否成功</h5><p>在 git bash 中输入以下命令查看是否成功</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="NGINX"><figure class="iseeu highlight /nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> -T git<span class="variable">@github</span>.com</span><br></pre></td></tr></tbody></table></figure></div><p>如果提示 <code>You've successfully authenticated, but GitHub does not provide shell access.</code> 说明 SSH 配置成功了。</p><h4 id="把-hexo-部署到-GitHub"><a href="#把-hexo-部署到-GitHub" class="headerlink" title="把 hexo 部署到 GitHub"></a>把 hexo 部署到 GitHub</h4><p>这一步，我们可以将 hexo 与 GitHub 关联起来，将 hexo 生成的静态网页部署到 GitHub 上。</p><p>进入 hexo 根目录，打开站点配置文件 <code>_config.yml</code>，找到 deploy ，修改成以下配置</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LESS"><figure class="iseeu highlight /less"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="comment">//github.com/GitHub 用户名/GitHub 用户名.github.io.git </span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></tbody></table></figure></div><p>此时，我们还需要安装一个插件 <code>hexo-deployer-git</code> ，才能使用部署的命令。</p><p>在 git bash 中输入以下命令</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GAUSS"><figure class="iseeu highlight /gauss"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//进入 hexo 博客根目录</span></span><br><span class="line">npm install hexo-deployer-git --<span class="keyword">save</span></span><br></pre></td></tr></tbody></table></figure></div><p>然后，我们可以使用以下命令一键部署到 GitHub 上</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SAS"><figure class="iseeu highlight /sas"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean <span class="variable">&&</span> hexo g <span class="variable">&&</span> hexo d</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>hexo clean 即清除你之前生成的东西，可以不加。</p><p>hexo g 即 hexo generate 的缩写，生成静态文件</p><p>hexo d 即 hexo deploy 的缩写，部署文章</p></blockquote><!-- rebuild by neat --></body></html>]]></content>
  </entry>
</search>
